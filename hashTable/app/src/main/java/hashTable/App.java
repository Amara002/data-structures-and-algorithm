/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashTable;

import hashTable.BinaryTree.BinaryTree;
import hashTable.BinaryTree.Node;

import java.util.HashMap;

import static hashTable.HashTable.leftJoin;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        HashTable<String, Integer> studentAllowances = new HashTable<>();
        studentAllowances.add("John", 300);
        studentAllowances.add("Sally", 400);
        studentAllowances.add("Tom", 200);
        studentAllowances.add("Jade", 100);

        System.out.println("The size is => " + studentAllowances.getSize());
        System.out.println("The Sally allowance is => " + studentAllowances.get("Sally"));
        System.out.println("Array cotains Sally =>" + studentAllowances.contains("Sally"));
        System.out.println("Delete Sally => " + studentAllowances.remove("Sally"));
        System.out.println("The size is => " + studentAllowances.getSize());
        System.out.println("Array cotains Sally =>" + studentAllowances.contains("Sally"));


//        challenge 31
        String Amara = "I am a student in LTUC and I like  ";
        System.out.println("the first repeated word: " + studentAllowances.repeatedWord(Amara));


//        challenge 32
        HashTable<Integer,Integer> trees = new HashTable<Integer, Integer>();

        BinaryTree tree1 = new BinaryTree();
        BinaryTree tree2 = new BinaryTree();

        tree1.setRoot(new Node(150));
        tree1.getRoot().setLeft(new Node(100));
        tree1.getRoot().setRight(new Node(250));
        tree1.getRoot().getRight().setLeft(new Node(200));
        tree1.getRoot().getRight().setRight(new Node(350));
        tree1.getRoot().getRight().getRight().setLeft(new Node(300));
        tree1.getRoot().getRight().getRight().setRight(new Node(500));
        tree1.getRoot().getLeft().setLeft(new Node(75));
        tree1.getRoot().getLeft().setRight(new Node(160));
        tree1.getRoot().getLeft().getRight().setLeft(new Node(125));
        tree1.getRoot().getLeft().getRight().setRight(new Node(175));

        tree2.setRoot(new Node(42));
        tree2.getRoot().setLeft(new Node(100));
        tree2.getRoot().setRight(new Node(600));
        tree2.getRoot().getRight().setLeft(new Node(200));
        tree2.getRoot().getRight().setRight(new Node(350));
        tree2.getRoot().getRight().getRight().setLeft(new Node(4));
        tree2.getRoot().getRight().getRight().setRight(new Node(500));
        tree2.getRoot().getLeft().setLeft(new Node(15));
        tree2.getRoot().getLeft().setRight(new Node(160));
        tree2.getRoot().getLeft().getRight().setLeft(new Node(125));
        tree2.getRoot().getLeft().getRight().setRight(new Node(175));

        System.out.println(trees.treeIntersection(tree1,tree2));

//        codeChallenge 33
        HashMap<String, String> firstHashMap = new HashMap<>();
        HashMap<String, String> secondHashMap = new HashMap<>();

        firstHashMap.put("fond", "enamored");
        firstHashMap.put("wrath", "anger");
        firstHashMap.put("diligent", "employed");
        firstHashMap.put("outfit", "garb");
        firstHashMap.put("guide", "usher");

        secondHashMap.put("fond", "averse");
        secondHashMap.put("wrath", "delight");
        secondHashMap.put("diligent", "idle");
        secondHashMap.put("guide", "follow");
        secondHashMap.put("flow", "jam");

        System.out.println(leftJoin(firstHashMap, secondHashMap));
    }
}
