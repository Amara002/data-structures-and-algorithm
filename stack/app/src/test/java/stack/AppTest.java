/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;




class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test
    public void pushToStackTest(){
        Stack<Integer> stackTest = new Stack<>();
        stackTest.push(11);
        stackTest.push(7);
        stackTest.push(2021);
        assertEquals("Stack { 2021 --> 7 --> 11 --> Null }",stackTest.toString());
    }

    @Test
    public void popStackTest(){
        Stack<Integer> stackTest = new Stack<>();
        stackTest.push(11);
        stackTest.push(7);
        stackTest.push(2021);
        stackTest.pop();
        assertEquals("Stack { 7 --> 11 --> Null }",stackTest.toString());
    }

    @Test
    public void emptyStackTest(){
        Stack<Integer> stackTest = new Stack<>();
        stackTest.push(11);
        stackTest.push(7);
        stackTest.push(2021);
        stackTest.pop();
        stackTest.pop();
        stackTest.pop();
        assertEquals("Stack { Null }",stackTest.toString());
        assertTrue(stackTest.isEmpty());
        assertEquals(0,stackTest.pop());
        assertEquals(0,stackTest.peek());


    }

    @Test
    public void peekStackTest(){
        Stack<Integer> stackTest = new Stack<>();
        stackTest.push(11);
        stackTest.push(7);
        stackTest.push(2021);
        assertEquals(2021,stackTest.peek());
        stackTest.pop();
        assertEquals(7,stackTest.peek());
    }

    @Test
    public void enqueueToQueueTest(){
        Queue<Integer> queueTest = new Queue<>();
        queueTest.enqueue(11);
        queueTest.enqueue(7);
        queueTest.enqueue(2021);
        assertEquals("Queue { 11 --> 7 --> 2021 --> Null }",queueTest.toString());
    }

    @Test
    public void dequeueFromQueueTest(){
        Queue<Integer> queueTest = new Queue<>();
        queueTest.enqueue(11);
        queueTest.enqueue(7);
        queueTest.enqueue(2021);

        queueTest.dequeue();
        assertEquals("Queue { 7 --> 2021 --> Null }",queueTest.toString());
    }
    @Test
    public void emptyQueueTest(){
        Queue<Integer> queueTest = new Queue<>();
        queueTest.enqueue(11);
        queueTest.enqueue(7);
        queueTest.enqueue(2021);
        queueTest.dequeue();
        queueTest.dequeue();
        queueTest.dequeue();
        assertTrue(queueTest.isEmpty());
        assertEquals("Queue { Null }",queueTest.toString());
        assertEquals( 0,queueTest.dequeue());
        assertEquals(0,queueTest.peek());
    }

    @Test
    public void peekQueueTest(){
        Queue<Integer> queueTest = new Queue<>();
        queueTest.enqueue(11);
        queueTest.enqueue(7);
        queueTest.enqueue(2021);
        assertEquals(11,queueTest.peek());
        queueTest.dequeue();
        assertEquals(7,queueTest.peek());
    }
//    -------------------------
@Test
public void enqueueTest(){

    PseudoQueue pseudoQueue = new PseudoQueue();

    pseudoQueue.enqueue(11);
    assertEquals("Stack { 11 --> Null }",pseudoQueue.toString());
    pseudoQueue.enqueue(6);
    pseudoQueue.enqueue(2017);
    assertEquals(11,pseudoQueue.stack1.peek());
    assertEquals("Stack { 11 --> 6 --> 2017 --> Null }",pseudoQueue.toString());
    assertFalse(pseudoQueue.stack1.isEmpty());
}

    @Test
    public void dequeueTest(){
        PseudoQueue pseudoQueue = new PseudoQueue();
        pseudoQueue.enqueue(11);
        pseudoQueue.enqueue(6);
        pseudoQueue.enqueue(2017);

        assertEquals(11 ,pseudoQueue.dequeue());
        assertEquals("Stack { 6 --> 2017 --> Null }",pseudoQueue.toString());
        pseudoQueue.dequeue();
        pseudoQueue.dequeue();
        assertTrue(pseudoQueue.stack1.isEmpty());
        assertEquals("Stack { Null }",pseudoQueue.toString());
        assertEquals(0,pseudoQueue.dequeue());
    }
//    ------------------
private static final AnimalShelter AnimalShelther = new AnimalShelter();
@Test
public void enqueueCats(){
    AnimalShelther.enqueue(new Cat("Bonbon"));
    AnimalShelther.enqueue(new Cat("Moca"));
    AnimalShelther.enqueue(new Cat("Dongol"));
    assertEquals("AnimalShelter{catQ=Queue { Bonbon --> Moca --> Dongol --> Null }, dogQ=Queue { Null }}", AnimalShelther.toString());
}

    @Test
    public void enqueueDogs(){
        AnimalShelther.enqueue(new Dog("leo"));
        AnimalShelther.enqueue(new Dog("Losi"));
        AnimalShelther.enqueue(new Dog("Melo"));
        assertEquals("AnimalShelter{catQ=Queue { Null }, dogQ=Queue { leo --> Losi --> Melo --> Null }}", AnimalShelther.toString());

    }
    @Test
    public void dequeueCat(){
        AnimalShelther.enqueue(new Cat("Bonbon"));
        AnimalShelther.enqueue(new Cat("Moca"));
        AnimalShelther.enqueue(new Cat("Dongol"));
        AnimalShelther.dequeue("Cat");
        assertEquals("AnimalShelter{catQ=Queue { Moca --> Dongol --> Null }, dogQ=Queue { Null }}", AnimalShelther.toString());
    }

    @Test
    public void dequeueDogs(){
        AnimalShelther.enqueue(new Dog("leo"));
        AnimalShelther.enqueue(new Dog("Losi"));
        AnimalShelther.enqueue(new Dog("Melo"));
        AnimalShelther.dequeue("Dog");
        assertEquals("AnimalShelter{catQ=Queue { Null }, dogQ=Queue { Losi --> Melo --> Null }}", AnimalShelther.toString());
    }

    @Test
    public void emptyDog(){
        AnimalShelther.enqueue(new Dog("oneDog"));
        AnimalShelther.enqueue(new Dog("twoDog"));
        AnimalShelther.enqueue(new Dog("threeDog"));
        AnimalShelther.dequeue("Dog");
        AnimalShelther.dequeue("Dog");
        AnimalShelther.dequeue("Dog");
        assertTrue(AnimalShelther.dogQ.isEmpty());
    }

    @Test
    public void emptyCat(){
        AnimalShelther.enqueue(new Cat("oneCat"));
        AnimalShelther.enqueue(new Cat("twoCat"));
        AnimalShelther.enqueue(new Cat("threeCat"));
        AnimalShelther.dequeue("Cat");
        AnimalShelther.dequeue("Cat");
        AnimalShelther.dequeue("Cat");
        assertTrue(AnimalShelther.catQ.isEmpty());
    }
}
