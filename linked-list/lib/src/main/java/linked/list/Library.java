/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.w3c.dom.ls.LSOutput;

import java.util.*;



/*
 * This Java source file was generated by the Gradle 'init' task.
 */
/*package linked.list;*/
public class Library {
    public boolean someLibraryMethod() {
        return true;
    }
//    private static final LinkedList<Integer> linkedList = new LinkedList<>();

    public static void main(String[] args) {
       LinkedList<Integer> list = new LinkedList<>();
        list.insert(6);
        list.insert(7);
        list.insert(8);
        list.insert(9);
        list.append(10);
        list.append(10);
        list.insertAfter(7 , 4);
        list.insertBefore(6 , 5);
        list.insertBefore(9 , 5);
        System.out.println(list);
        System.out.println(list.includes(4));

        System.out.println(list.findKthNode(-1));
        System.out.println(list.findKthNode(1));
        System.out.println(list.findKthNode(15));

        LinkedList<Integer> list1 = new LinkedList<>();
        list1.insert(1);
        list1.insert(2);
        list1.insert(3);
        list1.insert(4);
        System.out.println(zipList(list,list1));
    }

    private static LinkedList<Integer> zipList(LinkedList<Integer> one, LinkedList<Integer> two) {
        LinkedList<Integer> zipList = new LinkedList<>();
        int maxLength = Math.max(one.length, two.length);
        Node<Integer> temp1 = one.head;
        Node<Integer> temp2 = two.head;
        for(int i=1 ; i<=maxLength; i++ ){
            if (i <= one.length){
                zipList.append(temp1.data);
                temp1 = temp1.next;
            }
            if(i <= two.length){
                zipList.append(temp2.data);
                temp2 = temp2.next;
            }
        }
        return zipList;
    }
}
