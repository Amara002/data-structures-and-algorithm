/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import com.sun.tools.javac.Main;
import org.junit.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;

public class LibraryTest {
//    @Test public void someLibraryMethodReturnsTrue() {
//        Library classUnderTest = new Library();
//        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
//    }
    LinkedList<Integer> testLinkedList;
    LinkedList<Integer> testList;
    LinkedList<Integer> testList1;

    @Test
    public void testEmpty() {
        testLinkedList = new LinkedList<>();
        Assertions.assertTrue( testLinkedList.length >= 0 ,"Return true if linkedList has length ");
    }
    @Test
    public void testAdding() {
        testLinkedList = new LinkedList<>();
        testLinkedList.append(66);
        Assertions.assertTrue( testLinkedList.length == 1 ,"Return true if linkedList has length");
    }
    @Test
    public void testHead() {
        testLinkedList = new LinkedList<>();
        testLinkedList.append(10);
        testLinkedList.append(11);
        testLinkedList.append(12);
        testLinkedList.insertBefore(11 , 15);
        Assertions.assertEquals(10 , testLinkedList.head.data , "Checks if the head is equal to the  actual value of first node that takes the head place .");
        Assertions.assertTrue(testLinkedList.length == 4 , "Return true if the length increases when I add more elements.");
        Assertions.assertTrue(testLinkedList.includes(15) , "Return true if the element is found inside the linkedList");
        Assertions.assertFalse(testLinkedList.includes(19) , "Return false if the element is not found inside the linkedList");
        Assertions.assertEquals("{ 10 -> 15 -> 11 -> 12 -> null }" , String.valueOf(testLinkedList));
    }
    @Test
    public void findKthTest(){
        LinkedList<Integer> testList = new LinkedList<>();
        testList.insert(10);
        testList.insert(8);
        testList.insert(9);
        Assertions.assertEquals(3, testList.length);
        Assertions.assertEquals(8,testList.findKthNode(1));
        Assertions.assertNull(testList.findKthNode(-1));
        Assertions.assertNull(testList.findKthNode(3));
    }
    @Test
    public void zipList(){
      testList = new LinkedList<>();
        testList.insert(10);
        testList.insert(8);
        testList.insert(9);
       testList1 = new LinkedList<>();
        testList1.insert(1);
        testList1.insert(2);
        testList1.insert(3);
        Assertions.assertEquals("{ 10 -> 1 -> 8 -> 2 -> 9 -> 3 -> null }",zipList(testList,testList1));
    }
}
